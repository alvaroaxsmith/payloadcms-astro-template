---
import type { FormattedElement, FormattedText } from "@/payload/rich-text-export";
import escapeHTML from "escape-html";
import { Text, Node, type BaseEditor } from "slate";

interface Props {
  richText: Exclude<Node, BaseEditor>[];
}

const props = Astro.props;
---

{
  props.richText.map(
    (value: FormattedElement | FormattedText, _index: number, _array: (FormattedElement | FormattedText)[]) => {
      if (Text.isText(value)) {
        return (
          <Fragment>
            {value["bold"] && <strong>{value.text}</strong>}
            {value["code"] && <code>{value.text}</code>}
            {value["italic"] && <em>{value.text}</em>}
            {!value["bold"] && !value["code"] && !value["italic"] && (
              <Fragment>{value.text}</Fragment>
            )}
          </Fragment>
        );
      } else {
        return (
          <Fragment>
            {value.type === "h1" && (
              <h1>
                <Astro.self richText={value.children} />
              </h1>
            )}
            {value.type === "h2" && (
              <h2>
                <Astro.self richText={value.children} />
              </h2>
            )}
            {value.type === "h3" && (
              <h3>
                <Astro.self richText={value.children} />
              </h3>
            )}
            {value.type === "h4" && (
              <h4>
                <Astro.self richText={value.children} />
              </h4>
            )}
            {value.type === "h5" && (
              <h5>
                <Astro.self richText={value.children} />
              </h5>
            )}
            {value.type === "h6" && (
              <h6>
                <Astro.self richText={value.children} />
              </h6>
            )}
            {value.type === "quote" && (
              <p>
                <Astro.self richText={value.children} />
              </p>
            )}
            {value.type === "ul" && (
              <ul>
                <Astro.self richText={value.children} />
              </ul>
            )}
            {value.type === "ol" && (
              <ol>
                <Astro.self richText={value.children} />
              </ol>
            )}
            {value.type === "li" && (
              <li>
                <Astro.self richText={value.children} />
              </li>
            )}
            {value.type === "link" && (
              <a href={escapeHTML(value.url)}>
                <Astro.self richText={value.children} />
              </a>
            )}
            {!value.type && <p><Astro.self richText={value.children} /></p>}
          </Fragment>
        );
      }
    }
  )
}
